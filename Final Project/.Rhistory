choices = unique(broomrape_sep$broomrape_name)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output) {
# Update choices for accessions based on selected broomrape_name
observe({
updateSelectInput(session, "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$broomrape_name == input$broomrape_name]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(broomrape_name == input$broomrape_name) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$broomrape_name),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("broomrape_name", "Select Broomrape Name:",
choices = unique(broomrape_sep$broomrape_name)),
selectInput("accessions", "Select Accessions:",
multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("broomrape_name", "Select Broomrape Name:",
choices = unique(broomrape_sep$broomrape_name)),
selectInput("accessions", "Select Accessions:",
choices = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output) {
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(broomrape_name == input$broomrape_name) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$broomrape_name),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
View(broomrape_sep)
View(broomrape_long)
broomrape_long %>%
n_distinct(accession)
distinct(broomrape_long,accession)
distinct(broomrape_long,accession)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("broomrape_name", "Select Broomrape Name:",
choices = unique(broomrape_sep$broomrape_name)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output) {
# Update choices for accessions based on selected broomrape_name
observe({
updateSelectInput(session, "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$broomrape_name == input$broomrape_name]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(broomrape_name == input$broomrape_name) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$broomrape_name),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("broomrape_name", "Select Broomrape Name:",
choices = unique(broomrape_sep$broomrape_name)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected broomrape_name
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$broomrape_name == input$broomrape_name]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(broomrape_name == input$broomrape_name) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$broomrape_name),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("broomrape_name", "Select Broomrape Name:",
choices = unique(broomrape_sep$broomrape_name)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected broomrape_name
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$broomrape_name == input$broomrape_name]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(broomrape_name == input$broomrape_name) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$broomrape_name),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select Source:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select Source:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select Source:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select Source:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select site of experiment:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select site of experiment:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select site of experiment:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Host Plant", y = "Count of Broomrapes (on Avg)") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Origin of host plant (where the host plant was collected from):",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Host Plant", y = "Count of Broomrapes (on Avg)") +
scale_fill_discrete(name = "Year") +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
