server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select Source:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select Source:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select site of experiment:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape:",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select site of experiment:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Accession", y = "Counts") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Select site of experiment:",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Update choices for accessions based on selected source
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
# Filter data based on user input
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
# Render scatter plot
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Host Plant", y = "Count of Broomrapes (on Avg)") +
scale_fill_discrete(name = "Year") +  # Set legend title
theme_bw() # Use a white background theme
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Origin of host plant (where the host plant was collected from):",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Host Plant", y = "Count of Broomrapes (on Avg)") +
scale_fill_discrete(name = "Year") +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Origin of host plant (where the host plant was collected from):",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(naniar)
library(janitor)
library(ggplot2)
broomrape <- read.csv("Table_2_Association%20mapping%20for%20broomrape%20resistance%20in%20sunflower.csv")
#accession:Type of sunflower
#source: origin
#broomrape type_year. 2 per broomrape type measured in different year
#count: avg number of broomrapes on it.
miss_var_summary(broomrape)
broomrape<-
clean_names((broomrape))
broomrape <-
broomrape %>%
select(!confectionery)
broomrape_long <- broomrape %>%
pivot_longer(cols = c(3:8), names_to = "broomrape", values_to = "counts")
broomrape_sep<-
broomrape_long %>%
separate(broomrape, into=c("broomrape_name","year"),sep="_")
broomrape_sep %>%
group_by(broomrape_name) %>%
summarise(average_count = mean(counts, na.rm = T))
broomrape_sep %>%
group_by(broomrape_name) %>%
summarise(average_count = mean(counts, na.rm = T)) %>%
ggplot(aes(x=broomrape_name, y=average_count))+
geom_col()+
labs(title = "Average Attachment for Each Broomrape Type",
x="Broomrape Names",
y="Broomrape Counts")
broomrape_sep %>%
group_by(accession) %>%
summarise(ave_attachment = mean(counts, na.rm = T)) %>%
arrange(ave_attachment)
broomrape_sep %>%
group_by(accession) %>%
summarise(ave_attachment = mean(counts, na.rm = T)) %>%
arrange(ave_attachment) %>%
top_n(-5) %>%
ggplot(aes(x=accession , y=ave_attachment))+
geom_col()+
coord_flip()+
labs(title = "Average Attachment in Different Sunflower",
x="Sunflower Accession",
y="Broomrape Counts")
distinct(broomrape_long,accession)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Origin of host plant (where the host plant was collected from):",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Host Plant", y = "Count of Broomrapes (on Avg)") +
scale_fill_discrete(name = "Year") +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Origin of host plant (where the host plant was collected from):",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = paste("Counts for", input$source),
x = "Host Plant", y = "Count of Broomrapes (on Avg)") +
scale_fill_discrete(name = "Year") +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Origin of host plant (where the host plant was collected from):",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = "Broomrape Counts on Different Host Plants","),
x = "Host Plant", y = "Count of Broomrapes (on Avg)") +
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Origin of host plant (where the host plant was collected from):",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = "Broomrape Counts on Different Host Plants",),
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Origin of host plant (where the host plant was collected from):",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = "Broomrape Counts on Different Host Plants",
x = "Host Plant", y = "Count of Broomrapes (on Avg)") +
scale_fill_discrete(name = "Year") +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
source("C:/Users/m3m3z/Desktop/BIS15W2024FINAL-Hugo-Ni/Final Project/Final Project.Rmd")
ui <- fluidPage(
titlePanel("Broomrape Data Visualization"),
sidebarLayout(
sidebarPanel(
selectInput("source", "Origin of host plant (where the host plant was collected from):",
choices = unique(broomrape_sep$source)),
selectInput("accessions", "Select Accessions (Plant that hosted the broomrape):",
choices = NULL, multiple = TRUE)
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
observe({
updateSelectInput(inputId = "accessions",
choices = unique(broomrape_sep$accession[broomrape_sep$source == input$source]))
})
filtered_data <- reactive({
broomrape_sep %>%
filter(source == input$source) %>%
filter(accession %in% input$accessions)
})
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = accession, y = counts, fill = factor(year))) +
geom_point(shape = 21, size = 4, position = position_dodge(width = 0.5)) +
labs(title = "Broomrape Counts on Different Host Plants",
x = "Host Plant", y = "Count of Broomrapes (on Avg)") +
scale_fill_discrete(name = "Year") +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
